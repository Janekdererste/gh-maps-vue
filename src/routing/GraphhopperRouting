export interface Options {
    host?: string,
    basePath?: string,
    points: [number, number][],
    vehicle?: string
    data_type?: string
    locale?: string
    debug?: boolean
    points_encoded?: boolean
    instructions?: boolean
    elevation?: boolean
    optimize?: boolean
}

export default async function doRequest(args: Options): Promise<any> {

    const host = args.host ? args.host : 'https://graphhopper.com/api/1'
    const basePath = args.basePath ? args.basePath : '/route'
    const response = await fetch(host + basePath + '?', {
        headers: {
            'Accept': args.data_type ? args.data_type : 'application/json',
        },
        mode: 'cors',
    })

    if (response.ok) {
        const result = await response.json();
        return result
    } else {
        throw Error('something went wrong ')
    }

}

const getParametersAsQueryString = (args: Options, skipParameters: any) => {

    var queryString = "";
    for (var key in args) {
        if (skipParameters && skipParameters[key])
            continue;

        var val = args[key];

        if (key === 'points')
            queryString += this.createPointParams(val);
        else
            queryString += this.flatParameter(key, val);
    }
    return queryString;
}